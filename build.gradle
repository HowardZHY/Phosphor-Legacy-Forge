buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
        maven { url 'https://maven.cleanroommc.com' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "java"
    id "idea"
    id "eclipse"
    id "com.github.johnrengelman.shadow" version "2.0.4"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'
apply plugin: 'idea'

eclipse {
    classpath {
        downloadJavadoc = false
        downloadSources = false
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = false
    }
}

version = mod_version

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'stable', version: '39-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            arg '-torg.spongepowered.asm.launch.MixinTweaker'
        }
    }
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven' }
    maven { url 'https://maven.cleanroommc.com' }
    maven {
        url "https://www.cursemaven.com"
    }
}

configurations {
    include
    implementation.extendsFrom(include)
    configurations.runtimeOnly.canBeResolved = true
    shade
    compile.extendsFrom shade
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
    annotationProcessor 'com.google.guava:guava:32.1.2-jre'
    annotationProcessor 'com.google.code.gson:gson:2.8.9'
    annotationProcessor("org.spongepowered:mixin:0.8.5:processor")

    compile "org.spongepowered:mixin:0.7.11-SNAPSHOT"
    include "org.spongepowered:mixin:0.7.11-SNAPSHOT"

    compileOnly fg.deobf("curse.maven:dynamiclights-227874:2563244")
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', minecraft_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'mod_id': mod_id, 'mod_name': mod_name, 'version': project.version,
                'mcversion': minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

mixin {
    add sourceSets.main, "mixins.phosphor.refmap.json"
}

jar {
    manifest.attributes(
            "FMLAT": "phosphor_at.cfg",
            "FMLCorePlugin": "me.jellysquid.mods.phosphor.core.PhosphorFMLPlugin",
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true,
            "tweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": 0
    )
    from sourceSets.main.output
}

shadowJar {
    archiveName = jar.archiveName
    configurations = [project.configurations.include]
    compileJava.options.encoding = "UTF-8"
    exclude "native-binaries/*"
    exclude "META-INF/versions/**"

    dependencies {
        include(dependency("org.spongepowered:mixin:0.7.11-SNAPSHOT"))
        exclude 'LICENSE.txt', 'META-INF/MANIFSET.MF', 'META-INF/maven/**', 'META-INF/*.RSA', 'META-INF/*.SF'
    }
}

reobf {
    shadowJar {}
}

//jar.dependsOn("shadowJar")
jar.finalizedBy("shadowJar")
build.dependsOn shadowJar